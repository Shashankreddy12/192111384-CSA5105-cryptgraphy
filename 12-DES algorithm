#include <stdio.h>
#include <stdint.h>
#define KEY_SIZE 8
#define BLOCK_SIZE 8
static const int initialPermutationTable[] = { 2, 6, 3, 1, 4, 8, 5, 7 };)
uint8_t initialKey[KEY_SIZE] = { 0x13, 0x34, 0x57, 0x79, 0x9B, 0xBC, 0xDF, 0xF1 };
uint8_t ciphertext[BLOCK_SIZE] = { 0x21, 0xF4, 0x6B, 0x3B, 0xD1, 0x1A, 0xE5, 0x45 };
void generateSubKeys(uint8_t* key, uint8_t subKeys[16][KEY_SIZE]);
void applyInitialPermutation(uint8_t* block);
void applyInverseInitialPermutation(uint8_t* block);
void decrypt(uint8_t* block, uint8_t subKeys[16][KEY_SIZE]);
int main() {
    uint8_t subKeys[16][KEY_SIZE];
    generateSubKeys(initialKey, subKeys);
    printf("Ciphertext: ");
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02x ", ciphertext[i]);
    }
    printf("\n");
    decrypt(ciphertext, subKeys);
    printf("Decrypted Text: ");
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02x ", ciphertext[i]);
    }
    printf("\n");

    return 0;
}
void generateSubKeys(uint8_t* key, uint8_t subKeys[16][KEY_SIZE]) {
    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < KEY_SIZE; j++) {
            subKeys[i][j] = key[(15 - i + j) % KEY_SIZE];
        }
    }
}
void applyInitialPermutation(uint8_t* block) {
}
void applyInverseInitialPermutation(uint8_t* block) {
}
void decrypt(uint8_t* block, uint8_t subKeys[16][KEY_SIZE]) {
    for (int i = 0; i < 16; i++) {
        applyInitialPermutation(block);
        applyInverseInitialPermutation(block);
    }
}
